#  XML parser to parse codecoverage file generated by bullseye tool and populate the database 
use XML::Parser;
use File::Find;
use DBI;




@ARGV or die "usage: xmlelements-report DIR [DIR ...]\n";
my $filename=$ARGV[0];
my $cl_number=$ARGV[1];
my $version =$ARGV[2];
my $track =$ARGV[3];
my $mtime = (stat $filename)[9];
print "@@@@@@@@@@@@@@ $filename : $mtime\n";
my($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime($mtime);
my $file_creation_date=substr('0'.$mday,-2) . substr('0'.($mon+1),-2) .substr($year+1900,-2);
my $filedate="20".substr($year+1900,-2) ."-".substr('0'.($mon+1),-2)."-".substr('0'.$mday,-2);

print "$file_creation_date and version : $version\n";

my $first_string ="Insert into $track"."_CLDESC Values ('".$filedate."','Weekly','".$cl_number."')";
print ("inserting $first_string\n");



my $dbh = DBI->connect( 'dbi:Oracle:host=127.0.0.1;sid=***',"xyx", "****",{ RaiseError => 1, AutoCommit => 0 });

my @db_insert=();
push @db_insert,$first_string;
my @path="";
my $finish_limit=50;
my %m_dicStringIds;
my %m_parent_id;
open(IN, "<D:\\codecoverage\\filelist.txt")  or die "Couldn't open file for processing: $!";
while (<IN>) {
  chomp;
  $hash_table{$_} = 1;
}
close IN;
my @folder_list;
while ( my ($key, $value) = each(%hash_table) ) {

	my $path= $key;
	my @array=split(/\//,$path);
	print ("$path : $folder\n");
	push @folder_list,$array[-1];
}
my %params = map { $_ => 1 } @folder_list;
#&GetAllStringsAndIds;


my $parser = XML::Parser->new(

    Handlers => {

        Start => \&start_element,
        Char  => \&characters,
        End   => \&end_element,
    },
);

print ("Cl name is $ARGV[1] and xml file name is $ARGV[0] \n");
find \&process_xml, $ARGV[0];


print ("DEBUG m_lstStringId =@m_lstParentId\n\n");
#&Genarate_tree;
&AddEntry;
exit;


sub process_xml {
	#print ("ENTER process_xml\n\n");
    $parser->parsefile( $_ )
        if substr( $_, -4 ) eq '.xml' and -f;
}


sub start_element {
	#print ("ENTER start_element\n\n");
    my ( $expat, $element, %attrval ) = @_;
	$name=$attrval{'name'};
	if(($element ne "probe") && ($element ne "BullseyeCoverage")) {
		push @path,$name;
		if(exists($params{$name})) 
		{
				
				
				
				my ($idString,$fun_covered_percentage,$cd_covered_percentage);
				my ($fn_cov,$fn_total,$cd_cov,$cd_total,$d_cov,$d_total);
				$name=$attrval{'name'};
				
				$fn_cov=$attrval{'fn_cov'};
				$fn_total=$attrval{'fn_total'};
				$cd_cov=$attrval{'cd_cov'};
				$cd_total=$attrval{'cd_total'};
				$d_cov=$attrval{'d_cov'};
				$d_total=$attrval{'d_total'};
				my $required_fun=0;
				my $fun_uncovered=$fn_total-$fn_cov;
				if ($fn_total >0)
				{
					$fun_covered_percentage=($fn_cov/$fn_total)*100;
					if($fun_covered_percentage <$finish_limit)
					{
						my $limit = 0.5*$fn_total;
						$required_fun=($limit - $fn_cov);
						$required_fun = sprintf "%.0f", $required_fun;
					}
				}
				$fun_covered_percentage = sprintf "%.2f", $fun_covered_percentage;
				my $someNames = join('/', @path);
				#print ("**** looking $someNames in hash_table\n\n");
				#my $htmlid=gethtmllink(ChangeListId,AssetPathId);
				if(exists($hash_table{$someNames})) 
				{
					#print ("found $someNames\n");
					
					print ("$someNames $fun_covered_percentage $fun_uncovered  : $required_fun  $fn_cov $fn_total \n");
					my $string ="Insert into $track"."_CL_COV (ChangeListId, AssetPathId, fn_uncov_per, fn_uncov,fn_required,fn_cov,fn_total,create_date,status,version) Values ('".$cl_number."','".$someNames."','".$fun_covered_percentage."','".$fun_uncovered."','".$required_fun."','".$fn_cov."','".$fn_total."',to_date('".$file_creation_date."', 'ddmmyy'),'YES','".$version."')";
					push @db_insert,$string;
				
				}
		}
			
	}
}




sub characters {
	#print ("ENTER characters\n\n");

    @element_stack
        and $elements{ $element_stack[ -1 ] }{ characters } = 1;
		
}


sub end_element {
		#print ("ENTER end_element\n\n");
        my ( $expat, $element, @attrval ) = @_;
		if(($element ne "probe") && ($element ne "BullseyeCoverage")) {
		
		
		pop @path;
		
		
		
		}
}




